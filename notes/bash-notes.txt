# -- bash resources -- #

## opendirs

wget -e robots=off -r -nc -nH --cut-dirs=3 -np "URL"

## encoding/converting

normalize audio with ffmpeg:

ffmpeg -i input.wav -filter:a loudnorm output.wav

## renaming

replace all spaces with underscores (requires prename):

find . -type f -name "*.wav" -exec prename 's/ /_/g' {} \;

replace all instances of "_-_" with a single dash:

find . -type f -name "*.wav" -exec prename 's/_-_/_/g' {} \;

upper to lower:

for i in *.wav; do mv "$i" "$(echo "$i" | tr '[A-Z]' '[a-z]')"; done

#!/usr/bin/env bash
for file in *.flv; do
    i=$(basename "$file" .flv)
    ffmpeg -i "$file" -c:a libvorbis -q:a 6 "$i.ogg"
done

#!/usr/bin/env bash
for i in *.ogg; do 
    mv "$i" "$(echo ${i%.ogg} | tr [:lower:] [:upper:]).ogg"; 
done

#!/usr/bin/env bash
for i in *.m4a; do
    ffmpeg -i "$i" -c:a libvorbis -qscale:a 5 "$i.ogg"
done

#!/usr/bin/env bash
for i in *.md; do
    mv "$i" "${i%.md}.txt"
done

find and rename files recursively:

#!/usr/bin/env bash
find . -type f -name '*.foo' -print0 | while IFS= read -r -d '' f; do
    mv -- "$f" "${f%.foo}.bar"
done

for all zip files, create a directory based on file name, extract the contents to the directory:

#!/usr/bin/env bash
for i in *.zip; do
    dir=${i%%.*} # create a dir based on the filename with no dot or extension
    mkdir "$dir"
    unzip "$i" -d "$dir"
done

## creating temp directories and files

#!/usr/bin/env bash
MY_TMPFILE="$(mktemp "${TMPDIR:-/tmp/}$(basename "$0").XXXXXXXXXX")"
trap 'rm -f "$MY_TMPFILE"' EXIT

TMPROOT=/tmp;
TMPDIR=$(mktemp -d $TMPROOT/somedir.XXXXXX);
TMPFILE=$(mktemp $TMPROOT/somefile.XXXXXX);
trap "rm -rf $TMPDIR $TMPFILE; exit" INT TERM EXIT; some treatment using $TMPDIR and $TMPFILE; exit 0

tempfoo=`basename $0`
TMPFILE=`mktemp /tmp/${tempfoo}.XXXXXX` || exit 1
echo "program output" >> $TMPFILE

## finding a script's absolute path:

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

## logging

myscript >> log.txt 2>&1

show the script's output on the screen and log to a file:

myscript 2>&1 | tee log.txt

...or to append to a logfile:

myscript 2>&1 | tee -a log.txt

functions for logging in scripts:

LOGFILE="$(mktemp "${TMPDIR:-/tmp/}$(basename "$0").XXXXXXXXXX")"
trap 'rm -f "$LOGFILE"' EXIT

#!/usr/bin/env bash
readonly SCRIPT_NAME=$(basename $0)

log() {
    echo "$@"
    logger -p user.notice -t $SCRIPT_NAME "$@"
}

err() {
    echo "$@" >&2
    logger -p user.error -t $SCRIPT_NAME "$@"
}

log "writing to stdout"
err "writing to stderr"

## youtube-dl options (+mpv)

youtube-dl already selects the BEST format, pass -F to see other formats.

to extract audio only:

youtube-dl -x --audio-format mp3|vorbis|wav --restrict-filenames URL

handy stuff here: https://wiki.archlinux.org/index.php/mpv

## fun with find

find . -type f \( -name '03*' -a ! -name '*MED*' -a ! -name '*SOFT*' \) ! -path './kit1/*' -exec cp {} kit1 \;
find . -type f \( ! -name '*MED*' -a ! -name '*SOFT*' \) ! -path './kit1/*' -exec cp {} kit1 \;
find . -type f -name '*ROOM*' -print0 | while IFS= read -r -d '' i; do afplay "$i"; done

`-a` means and and `-o` means or.

## script template ideas

fail and bail:

{ echo "Don't run me in production yet!" >&2; exit 1; }

are you root?

[[ $EUID -ne 0 ]] && { echo "This script must be run as root!" >&2; exit 1; }
