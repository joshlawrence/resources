%h1 Screencasting with OpenBSD

%h2 USB Audio

%p
  Any USB microphone should appear as a new audio device. Here is the
  <em>dmesg</em> for my mic by ART:

:codeblock
  uaudio0 at uhub0 port 2 configuration 1 interface 0 "M-One USB" rev 1.10/0.01 addr 2
  uaudio0: audio rev 1.00, 8 mixer controls
  audio1 at uaudio0

%p
  <em>audioctl</em> can read off all of the specific characterisitcs of this
  device

:codeblock
  $ audioctl -f /dev/audio1 | grep record
  mode=play,record
  record.rate=48000
  record.channels=1
  record.precision=16
  record.bps=2
  record.msb=1
  record.encoding=slinear_le
  record.pause=0
  record.active=0
  record.block_size=1960
  record.bytes=0
  record.errors=0

%p
  Now test the recording from the second audio device using <a
  href="http://man.openbsd.org/aucat">aucat(1)</a>

:codeblock
  aucat -f rsnd/1 -o file.wav

%p
  If the device also has a headset audio can be played through the same
  device.

:codeblock
  aucat -f rsnd/1 -i file.wav

%h2 Screen Capture using Xvfb

%p
  The rate at which a framebuffer for your video card is a feature of the
  hardware and software your using, and it's often very slow. <a
  href="http://www.karlrunge.com/x11vnc/#limitations">x11vnc</a> will print an
  estimate of the banwidth for the system your running.

:codeblock
  x11vnc
  ...
  09/05/2012 22:23:45 fb read rate: 7 MB/sec

%p
  This is about 4fps. We can do much better by using a virtual framebuffer.
  Here I'm setting up a new screen, setting the background color, starting <a
  href="http://man.openbsd.org/cwm">cwm</a> and an instance of xterm

:codeblock
  :::sh
  Xvfb :1 -screen 0 720x540x16 &
  DISPLAY=:1 xsetroot -solid steelblue &
  DISPLAY=:1 cwm &
  DISPLAY=:1 xterm +sb -fa Hermit -fs 14 &


%p
  Much better! Now we're up around 20fps.

:codeblock
  x11vnc -display :1  &
  ...
  11/05/2012 18:04:07 fb read rate: 168 MB/sec

%p
  Make a connection to this virtual screen using <em>raw</em> encoding to
  eliminate time wasted on compression.

:codeblock
  vncviewer localhost -encodings raw

%p
  A test recording with sound then looks like this

:codeblock
  ffmpeg -f sndio -i snd/1 -y -f x11grab -r 12 -s 800x600 -i :1.0 -vcodec ffv1 ~/out.avi

%p
  <strong>Note:</strong> always stop the recording and playback using
  <em>q</em>, not <em>Ctrl-C</em> so that audio inputs are shut down properly.

%h2 Screen Capture using Xephyr

%p
  <a href="http://awesome.naquadah.org/wiki/Using_Xephyr">Xephyr</a> is
  perhaps the easiest way to run X with a shadow framebuffer. This solution also
  avoids reading from the video card's RAM, so it's reasonably fast.

:codeblock
  :::sh
  Xephyr -ac -br -noreset -screen 800x600 :1 &
  DISPLAY=:1 xsetroot -solid steelblue &
  DISPLAY=:1 cwm &
  DISPLAY=:1 xrdb -load ~/.Xdefaults &
  DISPLAY=:1 xterm +sb -fa "Hermit" -fs 14 &

%p
  Capture works in exactally the same way. This command tries to maintain
  12fps.

:codeblock
  ffmpeg -f sndio -i snd/1 -y -f x11grab -r 12 -s 800x600 -i :1.0 -vcodec ffv1 -acodec copy ~/out.avi

%p
  To capture keyboard and mouse input press <em>Ctrl</em> then <em>Shift</em>.
  This is very handy for using navigating a window manager in the nested X
  session.

%h2 Arranging Windows

%p
  I have sometimes found it helpful to launch applications and arrange them in
  a specific way. This will open up a web browser listing the current directory
  and position windows using <a
  href="http://www.semicomplete.com/projects/xdotool/">xdotool</a>

:codeblock
  :::sh
  DISPLAY=:1 midori "file:///`pwd`" &
  sleep 2
  DISPLAY=:1 xdotool search --name "xterm" windowmove 0 0
  DISPLAY=:1 xdotool search --class "midori" windowmove 400 0
  DISPLAY=:1 xdotool search --class "midori" windowsize 400 576

%p
  This will position the window precisely so that it appears to be in a tmux
  window on the right.

%h2
  Audio/Video Sync

%p
  If you find that the audio is way out of sync with the video, you can ajust
  the start using the <em>-ss</em> before the audio input to specify the number of
  seconds to delay. My final recording command line, that delays the audio by 0.5
  seconds, writing 12fps

:codeblock
  ffmpeg -ss 0.5 -f sndio -i snd/1 -y -f x11grab -r 12 -s 800x600 -i :1.0 -vcodec ffv1  -acodec copy ~/out.avi

%h2 Sharring a Terminal with tmux

%p
  If you're trying to record a terminal session, <a
  href="http://www.openbsd.org/cgi-bin/man.cgi?query=aucat&amp;manpath=OpenBSD+Current">
  tmux</a> is able to share a session. In this way a recording of an X framebuffer
  can be taken without even using the screen. Start by creating the session.

:codeblock
  tmux -2 -S /tmp/tmux0

%p
  Then on the remote side connect on the same socket

:codeblock
  tmux -2 -S /tmp/tmux0 attach

%h2 Taking Screenshots

%p
  Grabbing a screenshots on Xvfb server is easily accomplished with <a
  href="http://www.imagemagick.org/">ImageMagick's</a> <em>import</em> command

:codeblock
  DISPLAY=:1 import -window root screenshot.png

%h2 Audio Processing and Video Transcoding

%p
  The first step is to ensure that the clip begins and ends where you'd like it
  to. The following will make a copy of the recording starting at time
  <em>00:00</em> and ending at <em>09:45</em>

:codeblock
  ffmpeg -i interactive-sql.avi \
      -vcodec copy -acodec copy
      -ss 00:00:00 -t 00:09:45
      interactive-sql-trimmed.avi
  mv interactive-sql-trimmed.avi interactive-sql.avi

%p
  Setting the gain correctly is very important with an analog mixer, but if
  you're using a USB mic there may not be a gain option; simply record using it's
  built-in settings and then adjust the levels afterwards using a utility such as
  <a href="http://normalize.nongnu.org/">normalize</a>.  First extact the audio as
  a raw PCM file and then run normalize

:codeblock
  ffmpeg -i interactive-sql.avi -c:a copy -vn audio.wav
  normalize audio.wav

%p
  Next merge the audio back in again

:codeblock
  ffmpeg -i interactive-sql.avi -i audio.wav \
      -map 0:0 -map 1:0 -c copy interactive-sql-normalized.avi

%p
  The final step is to compress the screencast for distribution. Encoding to
  VP8/Vorbis is easy:

:codeblock
  ffmpeg -i interactive-sql-normalized.avi -c:v libvpx -b:v 1M
      -c:a libvorbis -q:a 6 interactive-sql.webm
%p
  H.264/AAC is tricky. For most video players the color space needs to be set to
  <em>yuv420p</em>. The <em>-movflags</em> puts the index data at the beginning
  of the file to enable streaming/partial content requests over HTTP:

:codeblock
  ffmpeg -y -i interactive-sql-normalized.avi -c:v libx264 \
      -preset slow -crf 14 -pix_fmt yuv420p -movflags +faststart \
      -c:a aac -q:a 6 interactive-sql.mp4


/ brew reinstall ffmpeg --with-libvpx --with-libvorbis --with-acc

/ https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats
/ http://blog.superuser.com/2012/02/24/ffmpeg-the-ultimate-video-and-audio-manipulation-tool/

