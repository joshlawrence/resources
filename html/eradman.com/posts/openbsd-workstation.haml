%h1 An OpenBSD Workstation

%h2 Terminal Fonts

%p
  The most important feature of any workstation is getting a terminal that is
  pleasant to use. By default most terminals render text with a heavier weight
  than I would like. To solve this select a font with a <em>light</em> or
  <em>book</em> variation. Here is my invocation for the
  %a{:href=>"http://st.suckless.org/"}
    simple terminal

:codeblock
  st -f 'Hermit:light:pixelsize=14:antialias=true:autohint=true'

%p
  My
  %a{:href=>"https://github.com/eradman/openbsd-ports/tree/master/x11/st"}
    st port
  includes
%ul
  %li
    The
    %a{:href=>"http://st.suckless.org/patches/solarized"}
      solarized
    color scheme
  %li
    A modification to render <em>bold</em> fonts with the weight <em>normal</em>

%p
  The really compelling feature of <em>st</em> is that it automatically
  substitutes glyphs from the default font if the one you've selected does not
  contain them. This enables me to use the really excellent
  %a{:href=>"https://pcaro.es/p/hermit/"}
    Hermit font
  while retaining the extended character set of DejaVu Sans.

%p
  %img{:src=>"../library/st-1.png", :alt=>"utf-8 and colors"}

%p
  To ensure you get full Unicode support from applications such as <em>mutt</em>
  or </em>tmux</em> set your language type using

:codeblock
  :::sh
  LC_CTYPE=en_US.UTF-8
  export LC_CTYPE


%h2 Suspend &amp; Resume

%p
  OpenBSD has very good ACPI support, see
  %a{:href=>"http://www.openbsd.org/cgi-bin/man.cgi?query=apmd&amp;apropos=0&amp;sektion=0&amp;manpath=OpenBSD+Current&amp"}
    apmd(8).
  <em>zzz</em> and <em>ZZZ</em> are shortcuts for suspend and hibernate if
  <em>apmd</em> is run at startup.

:codeblock
  :::sh
  apmd_flags="-A"

%p
  <em>-A</em> will automatically scale the CPU frequency to save power.

%h2 X Configuration: .xinitrc

:codeblock
  :::sh
  # .xinitrc
  xset -b

  while true; do
      batt="$(sysctl -n hw.sensors.acpibat0.watthour3 | cut -f1,2 -d" ")"
      xsetroot -name "$batt"
      sleep 60
  done &
  xsetroot -solid gray40
  exec dwm

%p
  <em>xset -b</em> disables the annoying beep that terminals sometimes make.

%p
  I run a loop in the background that read the available battery life (Wh) and
  updates the window manager's display area. Any sensor data can be included in
  such output.
%p
  Finally set the background color and start your favorite window manager.

%h2
  Switch to an External Monitor

%p
  Hopefully your desktop monitor is larger than your laptop display.
  I use a little docking script to switch to the external display that detects
  which connection is used and switches the others off

:codeblock
  :::sh
  #!/bin/sh

  dp() {
      xrandr --output LVDS1 --off
      xrandr --output VGA1 --off
      xrandr --output DP1 --auto
      xrandr --output HDMI1 --off
  }

  hdmi() {
      xrandr --output LVDS1 --off
      xrandr --output VGA1 --off
      xrandr --output DP1 --off
      xrandr --output HDMI1 --auto
  }

  set -x
  xrandr --query | grep "DP1 connected" && dp
  xrandr --query | grep "VGA1 connected" && hdmi
  xrandr --query | grep "HDMI1 connected" && hdmi



%p
  In my experience X11 will sometimes hide the cursor if resumed while using an
  external monitor. To solve this I use the <em>unclutter</em> utility to enable
  the cursor again after a short period of activity.

:codeblock
  :::sh
  pkill unclutter
  unclutter -idle 1 -root -grab -visible &

%h2
  Connecting to a Projector

%p
  If you started X with the VGA connected, it may pick a resolution common to
  both your screen and the external display. On my T60 it can be reset like so

:codeblock
  xrandr --output LVDS --mode 1400x900

%p
  Use <em>--query</em> to find out what modes each display supports.

%p
  If the external display supports a lower resolution you can set up a viewport
  that pans with the mouse pointer

:codeblock
  xrandr --output VGA-0 --mode 1280x720 --panning 1400x900

%p
  Or force both screens to use the same resolution

:codeblock
  xrandr --output VGA-0 --mode 1280x720 --output LVDS --mode 1280x720

%p
  I also add some additional logic in my <em>.xinitrc</em> to switch to the
  external display automatically if X is started while connected to an external
  monitor:

:codeblock
  xrandr --query | grep "DVI-0 connected" && ~/bin/docked-dvi
  xrandr --query | grep "VGA-0 connected" && ~/bin/docked-vga

%h2 tmux

%p
  There's only a few tweaks I make to my terminal multiplexor's
  configuration. I frequently run <a href="http://entrproject.org">entr</a> in a
  smaller pane on the bottom

:codeblock
  :::sh
  bind-key C-t split-window -p 25

%p
  I don't know of a terminal color picker, but they can be printed with a shell
  loop.

:codeblock
  :::sh
  #!/bin/ksh

  for i in `jot 255`; do
    printf "\033[38;5;${i}mcolour${i}\n"
  done

%p
  Then I set status background and active border to bright green

:codeblock
  :::sh
  set -g status-bg colour118
  set -g pane-active-border-fg colour118
  set -g pane-border-fg colour30

%p
  Most importantly, clean up the status bar so that only the window names are
  displayed:

:codeblock
  :::sh
  # remove status debris
  set -g status-left ''
  set -g status-right ''

%h2 Using Disk Encryption

%p
  OpenBSD provides software RAID by way of a virtual host bus adapter called
  <em>softraid0</em>. This HBA is also used for setting up disk encryption. To
  set use a disklabel (in my case for <em>sd0g /home</em> set the partition type
  to <em>RAID</em>

:codeblock
  $ doas disklabel -E /dev/sd0c
  Label editor (enter '?' for help at any prompt)
    g:         55641600        100653824    RAID
  > m g
  offset: [100653824]
  size: [55641600]
  FS type: [4.2BSD] RAID

%p
  Now configure it for crypto using <em>-c C</em>

:codeblock
  # bioctl -c C -l /dev/sd0g softraid0
  New passphrase: My Crypto Pass Phrase
  Re-type passphrase: My Crypto Pass Phrase
  softraid0: CRYPTO volume attached as sd1

%p
  Mount it using the same command. The kernel log will show a new virtual
  device appear

:codeblock
  sd1 at scsibus2 targ 1 lun 0: <OPENBSD, SR CRYPTO, 005> SCSI2 0/direct fixed
  sd1: 27168MB, 512 bytes/sector, 55641072 sectors

%p
  Now add a disklabel and format the encrypted volume

:codeblock
  $ doas disklabel -E /dev/wd0c
  $ doas newfs /dev/rwd0a

%p
  Devices in OpenBSD may be mounted by device name or by disklabel UID which is
  a random id generated when the label is created.

:codeblock
  $ disklabel /dev/sd1c | grep uid
  duid: 779d87bac3905122

%p
  It's this ID that we'll to mount the volume, in this way plugging in other
  drives won't confuse <em>mount</em> after we prompt the user for a password on
  boot. Adding the following to <em>rc.local</em> will ask for a password four
  times before giving up

:codeblock
  :::sh
  #/etc/rc.local
  for attept in 1 2 3 4; do
    bioctl -c C -l f878bdbe8655a6eb.k softraid0 && break
    sleep 1
  done
  fsck -y 0728fd2c8e49bc73.a
  mount -o nodev,nosuid,softdep,wxallowed f12a2aa015f390df.a /home

%p
  That last mount parameter <em>wxallowed</em> is important because it will
  allow you to run certain interpreters such as Python from a <em>virtualenv</em>
  in your home directory.

%p
  If you would like to enable crypto on the entire boot volume see <a
  href="http://www.tedunangst.com/flak/post/OpenBSD-softraid-crypto-boot">this
  post</a> by Ted Unangst.

%h2 Reducing Password Fatique with YubiKey

%p
  <a href="https://www.yubico.com/">Yubico</a> makes a nice little hardware
  key that, among other things, can be used to generate one time passwords for
  user authentication. The <em>yubikey-personalization-gui</em> is a Qt-based
  program that can be used to write private keys to one of two "slots". Copy the
  6-byte private identity and the 16-byte secret key without spaces to like so

:codeblock
  echo "5c e1 e0 3e 63 a4" \
          | tr -d ' ' > /var/db/yubikey/$USER.id
  echo "57 e3 af 3e 9b 51 2b 10 58 7d 33 fb d9 08 ef 7b" \
          | tr -d ' ' > /var/db/yubikey/$USER.key
  chmod 600 /var/db/yubikey/$USER.*

%p
  Now set YubiKey as the authentication method for the group <em>staff</em> by
  editing <em>/etc/login.conf</em>

:codeblock
  :::diff
  - :tc=auth-defaults:
  + :auth=yubikey

%p
  If you're a long-time BSD user you might be tempted to run <em>cap_mkdb</em>
  to rebuild the login DB. You don't need to do this; in fact the new <em>.db</em>
  file will override local changes to <em>/etc/login.conf</em>

%p
  To reduce typing I use the second slot on the Yubikey as a relatively secure
  method of enabling <a
  href="http://www.openbsd.org/cgi-bin/man.cgi?query=ssh-agent&amp;format=html">ssh-agent</a>
  in order to connect to remote systems where my public key(s) are installed. To
  start use the <em>yubikey-personalization-gui</em> to generate a random key,
  then set slot 2 to challange-response mode with this key

:codeblock
  hexkey=$(echo "dd b6 68 81 c9 73 f9 64 84 21 7e f0 69 e8 2c 28 1b 6c ad e2" | tr -d ' ')
  ykpersonalize -2 -ochal-resp -ochal-hmac -ohmac-lt64 -a $hexkey

%p
  Next I create new ssh keys (<em>ssh-keygen</em>) using part of the reply
  from <em>ykchalresp</em>. I installed script as <em>bin/ykauth</em>

:codeblock
  :::sh
  #!/bin/sh
  ykchalresp -2 "mysecret" | cut -c 1-15

%p
  Finally add this bit of logic to <em>.profile</em> to automatically activate
  these keys when I log in

:codeblock
  :::sh
  ssh-add -l > /dev/null 2>&1 || {
      eval `ssh-agent`
      0<&- SSH_ASKPASS='/home/eradman/bin/ykauth' ssh-add
      exec xinit
  }

%p
  Closing STDIN provokes <em>ssh-add</em> to use the program specified in by
  <em>SSH_ASKPASS</em>

%h2
  Performance Tuning

%p
  There is no documentation on improving the responsiveness of an OpenBSD
  desktop. These are the tweaks I make. First I allow applications to consume
  more RAM

:codeblock
  :::ptcap
  # /etc/login.conf
  staff:\
          :datasize-cur=2048M:\
          :datasize-max=2048M:\
          :datasize=2048M:\
          :openfiles-cur=1024:\
          :stacksize-cur=16M:\

%p
  If you know of other strategies for tuning desktop performance, please <a
  href="mailto:ericshane@eradman.com">send me what you know</a>.

%h2 Screen Lock

%p
  Add the following to your <em>.xinitrc</em> to automatically lock the screen
  after 5 minutes of activity

:codeblock
  :::sh
  xidle -timeout 300 -program "/usr/local/bin/slock" &

%p
  To trigger this action when the system is suspended, create
  <em>/etc/apm/suspend</em> with an instruction to signal <em>xidle</em> to run
  the lock program

:codeblock
  :::sh
  #!/bin/sh
  pkill -USR1 xidle

%p
  Using a
  %a{:href=>"https://github.com/eradman/openbsd-ports/tree/master/x11/slock"}
    custom version of slock
  it is possible to display a custom image. I like to construct a grayscale and
  slightly blured image based on what's on the screen when slock was called

:codeblock
  :::sh
  gm import -screen :0 -window root /tmp/import.png
  gm convert -colorspace Gray -motion-blur 0x4+180 /tmp/import{,2}.png
  exec /usr/local/bin/slock -i /tmp/import2.png

%p
  %img{:src=>"../library/import.png", :alt=>"unlocked screen"}

%p
  %img{:src=>"../library/import2.png", :alt=>"locked screen"}


%h2 Switching Networks

%p
  One thing that might not be obvious on BSD is how to switch from one network
  to another. When switching from wireless to wired for example. First, remove
  any IP addresses and set the interface down.

:codeblock
  ifconfig wpi0 -inet down

%p
  Removing the IP address from an interface also drops any link-local or
  so-called "connected" routes. It may be helpful to nuke all routes.

:codeblock
  route -n flush

%p
  <em>-n</em> prevents <em>route</em> from trying to resolve hostnames.

%p
  If you have set up WPA on your wireless card you can likewise remove the
  network parameters to obtain a broadcast SSID

:codeblock
   :::sh
   ifconfig wpi0 nwid "Mobile Hotspot" wpa wpakey 09123456789
   ifconfig wpi0 -nwid -wpa -wpakey # use broadcast id


-# libreoffice --headless --convert-to pdf file.docx
-# lpr -P printername file.pdf
