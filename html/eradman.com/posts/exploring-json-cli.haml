%h1 Exploring JSON on the Command Line

%h2 With Your Favorite Scripting Language

%p
  JSON has become the standard data interchange format of our time, and like XML
  it is not easily interpreted at the command line. For this reason I have often
  opened up a Ruby or Python interpreter and used the REPL to manually explore a
  structure in order to create a one-liner capable of parsing

:codeblock
  :::python
  >>> import json
  >>> j = json.loads(open('github-tag.json').read())
  >>> j.keys()
  [u'forced', u'compare', u'pusher', u'sender', u'repository', u'created',
  u'deleted', u'commits', u'after', u'head_commit', u'ref', u'base_ref',
  u'before']

%p
  If you want to browse around in your favorite editor instead you can get
  Python to pretty-print it

:codeblock
  $ python -mjson.tool < github-tag.json > github-tag-pretty.json
  $ vim github-tag-pretty.json

%p
  If you know the path of keys and indexes that you want to pull out of a JSON
  file your it your favorite scripting language has a way of extracting the data
  in one line

:codeblock
  $ ruby22 -r json -e 'puts JSON.parse(ARGF.read)["pusher"]' github-tag.json
  {"email"=>"ericshane@eradman.com", "name"=>"eradman"}


%h2 sed for JSON data

%p
  Another tool, <a
  href="https://stedolan.github.io/jq/">jq</a> was created expressly for the
  purpose of slicing and transforming JSON structures. Like <em>sed</em>,
  learning <em>jq</em> comes with it's own domain-specific language which
  provides enumerable ways of producing surprising results.

%h2 Flattened JSON

%p
  None of the aforementioned methods provide an easy way of exploring the layout
  of a complex JSON file. One solution to this is separate formatting from
  parsing. <a href="https://bitbucket.org/eradman/flattenjs">flattenjs</a>
  provides by formatting using the PostgreSQL path selection syntax which easily
  navigates hashes and lists:

:codeblock
  :::sql
    SELECT my_json#>>'{push,changes,0,new,target,message}' FROM ... ;

%p
  <em>flattenjs</em> transforms an input to this structure which can be pasted
  into a PostgreSQL query directly, or processed with <em>awk</em> and
  <em>grep</em>

:codeblock
  $ flattenjs < github-tag.json | grep tag0001
  {compare} https://github.com/eradman/hook-test/compare/tag0001
  {ref} refs/tags/tag0001

%p
  Because of the line-oriented syntax, pulling values out is trivial, and we can
  use our favorite command line tool to filer by key and select a value:

:codeblock
  $ flattenjs < tests/github-tag.json | awk '/{head_commit,id}/ { print $NF }'
  188260313028f69fb427ba31de714a924b16f951


