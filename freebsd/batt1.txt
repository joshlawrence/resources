sub battery_freebsd {
    my $battery = qx{/sbin/sysctl -n hw.acpi.battery.life 2>/dev/null} or return;
    my $charging = qx,/sbin/sysctl -n hw.acpi.battery.state,;
    my $time = qx,/sbin/sysctl -n hw.acpi.battery.time,;

    $battery /= 100;

    if ($charging == 2) {
        $charging = 1;
    } elsif ($charging == 7) { # Battery absent
        return;
    } else {
        $charging = 0;
    }

    return ($battery, $charging, $time);
}

sub battery {
    my @battery;
    if (-x q{/usr/sbin/ioreg}) {
        @battery = battery_osx();
    } elsif (-d q(/proc/acpi/battery)) {
        @battery = battery_acpi();
    } elsif (-d q(/sys/class/power_supply)) {
        @battery = battery_sys();
    } elsif ($^O eq q(freebsd)) {
        @battery = battery_freebsd();
    }

    battery_print(@battery);
    return;
}

sub battery_print {
    my ($battery, $charging, $time) = @_;
    if (defined $battery) {
        my_reset();
        print my_color(($charging ? q(green) : q(red)));
        if ($show_battery) {
            print $bolt;
            if ($rgb and not $screen) {
                my @color;
                if ($battery > 0.5) {
                    # green => yellow
                    @color = (int((1 - $battery) * 12), 5, 0);
                } else {
                    # yellow => red
                    @color = (5, int($battery * 12), 0);
                }
                if ($tmux) {
                    print q(#[fg=colour) . (16 + (6 * 6 * $color[0]) + (6 * $color[1]) + $color[2]) . q(]);
                } else {
                    print Term::ANSIColor::color(q(rgb) . join '' => @color);
                }
            } else {
                if ($battery < 0.333) {
                    print my_color(q(red));
                } elsif ($battery < 0.666) {
                    print my_color(q(yellow));
                } else {
                    print my_color(q(green));
                }
            }
            print $ticks[$#ticks * $battery];
        }
    }
    if ($remaining and defined $time) {
        my $sec = $time * 60;
        print q( ) . (($sec / (60 * 60)) % 24) . q(h) . (($sec / 60) % 60) . q(m);
    }
    return;
}