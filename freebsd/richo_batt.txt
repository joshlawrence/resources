#!/usr/bin/env bash
#
# script to get battery status in freebsd for tmux
# taken and adapted from here:
# https://github.com/richo/battery/blob/master/bin/battery

# output of sysctl -d hw.acpi.battery:
# hw.acpi.battery: battery status and info
# hw.acpi.battery.info_expire: time in seconds until info is refreshed
# hw.acpi.battery.units: number of batteries
# hw.acpi.battery.state: current status flags
# hw.acpi.battery.rate: present rate in mW
# hw.acpi.battery.time: remaining time in minutes
# hw.acpi.battery.life: percent capacity remaining

battery_status()
{
case $(uname -s) in
    "Linux")
        BATTERIES=$(ls /sys/class/power_supply | grep BAT)
        BAT_COUNT=$(ls /sys/class/power_supply | grep BAT | wc -l)
        for BATTERY in $BATTERIES; do
            BAT_PATH=/sys/class/power_supply/$BATTERY
            STATUS=$BAT_PATH/status
            [ "$1" = `cat $STATUS` ] || [ "$1" = "" ] || return 0
            if [ -f "$BAT_PATH/energy_full" ]; then
                naming="energy"
            elif [ -f "$BAT_PATH/charge_full" ]; then
                naming="charge"
            elif [ -f "$BAT_PATH/capacity" ]; then
                cat "$BAT_PATH/capacity"
                return 0
            fi
            BAT_PERCENT=$(( 100 * $(cat $BAT_PATH/${naming}_now) / $(cat $BAT_PATH/${naming}_full) ))
            BAT_TOTAL=$(( ${BAT_TOTAL-0} + $BAT_PERCENT ))
        done
        linux_get_bat
        ;;
    "FreeBSD")
        STATUS=`sysctl -n hw.acpi.battery.state`
        case $1 in
            "Discharging")
                if [ $STATUS -eq 1 ]; then
                    freebsd_get_bat
                fi
                ;;
            "Charging")
                if [ $STATUS -eq 2 ]; then
                    freebsd_get_bat
                fi
                ;;
            "")
                freebsd_get_bat
                ;;
        esac
        ;;
    "OpenBSD")
        openbsd_get_bat
        ;;
    "Darwin")
        case $1 in
            "Discharging")
                ext="No";;
            "Charging")
                ext="Yes";;
        esac

        ioreg -c AppleSmartBattery -w0 | \
        grep -o '"[^"]*" = [^ ]*' | \
        sed -e 's/= //g' -e 's/"//g' | \
        sort | \
        while read key value; do
            case $key in
                "MaxCapacity")
                    export maxcap=$value;;
                "CurrentCapacity")
                    export curcap=$value;;
                "ExternalConnected")
                    if [ -n "$ext" ] && [ "$ext" != "$value" ]; then
                        exit
                    fi
                ;;
                "FullyCharged")
                    if [ "$value" = "Yes" ]; then
                        exit
                    fi
                ;;
            esac
            if [[ -n "$maxcap" && -n $curcap ]]; then
                echo $(( 100 * $curcap / $maxcap ))
                break
            fi
        done
esac
}

BATTERY_STATUS=`battery_status $1`
[ -z "$BATTERY_STATUS" ] && exit

if [ -n "$CUTE_BATTERY_INDICATOR" ]; then
    cutinate $BATTERY_STATUS
else
    echo ${BATTERY_STATUS}%
fi
