---
# vagrant-playbook.yml
# ansible playbook for debian10
#
# this playbook is also a reference for dmp server config.
#
# TODO:
# * apache
# * system-wide venv for pip packages

- hosts: all
  become: true

  vars:
    local_hostname: "hdb2-vm"
    ansible_python_interpreter: python3
    packages:
      - apt-transport-https
      - apticron
      - bsd-mailx
      - build-essential
      - curl
      - dnsutils
      - entr
      - fail2ban
      - git
      - gnupg2
      - lsb-release
      - moreutils
      - msmtp-mta
      - ncdu
      - net-tools
      - openssl
      - pwgen
      - python3
      - python3-dev
      - python3-pip
      - sudo
      - tmux
      - tree
      - ufw
      - vim
      - virtualenv
      - zip

# base system tasks

  tasks:
    - ping:
    - name: set timezone
      timezone:
        name: America/Chicago

    - locale_gen:
        name: en_US.UTF-8
        state: present

    - name: create hosts file
      template:
        src: templates/hosts.j2
        dest: /etc/hosts

    - name: create sources.list
      copy:
        src: files/sources.list
        dest: /etc/apt/sources.list
        owner: root
        group: root
        mode: '0644'

    - name: set hostname
      hostname:
        name: "{{ local_hostname }}"

# software tasks

    - name: install base
      apt:
        pkg: "{{ packages }}"
        state: present
        update_cache: yes

# percona

    # - name: setup percona repos
    #   apt:
    #     deb: https://repo.percona.com/apt/percona-release_latest.buster_all.deb
    
    # - name: enable percona 80
    #   command: percona-release setup ps80

    # - name: install percona packages
    #   apt:
    #     pkg:
    #     - percona-server-server
    #     - percona-server-client
    #     - percona-xtrabackup-80
    #     - percona-toolkit

    # - name: copy mysql config
    #   copy:
    #     src: files/minimal.cnf
    #     dest: /etc/mysql/my.cnf
    #     owner: root
    #     group: root
    #     mode: '0644'

    # NOTE:
    # we don't set a password for root and authenticate using unix sockets

    # - name: generate mysql root password
    #   command: python3 -c "import secrets; print(secrets.token_urlsafe(16))"
    #   register: mysql_root_pwd

    # - name: print mysql root password
    #   debug:
    #     msg: "mysql root password: {{ mysql_root_pwd.stdout }}"

    # - name: create root my.cnf
    #   template:
    #     src: templates/root.my.cnf.j2
    #     dest: /root/.my.cnf
    #     owner: root
    #     group: root
    #     mode: '0600'

    # - name: set root password
    #   mysql_user:
    #     name: root
    #     host_all: yes
    #     login_unix_socket: /var/run/mysqld/mysqld.sock
    #     password: "{{ mysql_root_pwd }}"

    # - name: remove anonymous users 
    #   mysql_user:
    #     login_user: root
    #     login_unix_socket: /var/run/mysqld/mysqld.sock
    #     name: ''
    #     host_all: yes
    #     state: absent

    # - name: remove test database
    #   mysql_db:
    #     login_user: root
    #     login_unix_socket: /var/run/mysqld/mysqld.sock
    #     name: test
    #     state: absent

# system tasks

    - name: enable ufw logging
      ufw:
        logging: 'on'

    - name: allow ssh thru ufw
      ufw:
        rule: limit
        port: ssh

    - name: enable ufw
      ufw:
        state: enabled

    - name: add vagrant to extra groups
      user:
        name: vagrant
        groups: adm,staff
        append: yes

    # - name: create personal dirs
    #   file:
    #     path: "/home/vagrant/{{ item }}"
    #     owner: vagrant
    #     group: vagrant
    #     state: directory
    #     mode: '0755'
    #   with_items:
    #     - 'projects'
    #     - 'bin'

    - name: set primary editor
      command: update-alternatives --set editor /usr/bin/vim.basic

    - name: copy sshd_config
      copy:
        src: files/sshd_config
        dest: /etc/ssh/sshd_config
        owner: root
        group: root
        mode: '0644'

    - name: copy vimrc
      copy:
        src: files/vimrc
        dest: /etc/vim/vimrc
        owner: root
        group: root
        mode: '0644'

    - name: copy root bashrc
      copy:
        src: files/root.bashrc
        dest: /root/.bashrc
        owner: root
        group: root
        mode: '0644'

# wrap-up items

    - name: remove useless packages
      apt:
        autoclean: yes

    - name: reboot the vm
      reboot:

# EOF
